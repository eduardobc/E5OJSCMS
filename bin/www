#!/usr/bin/env node

/*

FOR CLUSTER APP USE PM2 MODULE
INIT APP WITH PM2
#pm2 start bin/www -i number_process_child --watch // in case of you change some code from the app and you want reload the server app
SCALING THE APP USING THE APP NAME
#pm2 scale app_name number_process_child
FOR MONITOR THE APP USE
#pm2 monit

IN CASE OF PM2 NOT FUNCTION ON THE SERVER, YOU CAN USE INSTEAD OF PM2 USE cluster MODULE FROM NODE.JS AND IMLEMENT HERE...
*/


/**
* Module dependencies.
*/
var app = require('../app');
var debug = require('debug')('e5ojs:server');
var http = require('http');




/**
* Get port from environment and store in Express.
*/
var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);
/**
* Create HTTP server.
*/
var server = http.createServer(app);
/**
* Listen on provided port, on all network interfaces.
*/
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
* Normalize a port into a number, string, or false.
*/
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}
/**
* Event listener for HTTP server "error" event.
*/
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
        break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
        break;
        default:
            throw error;
    }
}
/**
* Event listener for HTTP server "listening" event.
*/
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
